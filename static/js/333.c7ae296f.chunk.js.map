{"version":3,"file":"static/js/333.c7ae296f.chunk.js","mappings":"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","sources":["Pages/LoginTypes/Face.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport { Box, CircularProgress } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { PATHS } from \"../../utils/constants\";\r\nimport axios from \"axios\";\r\nconst videoConstraints = {\r\n  width: 519,\r\n  height: 400,\r\n  facingMode: \"user\",\r\n};\r\n\r\nconst Face = () => {\r\n  const navigate = useNavigate();\r\n  const response = JSON.parse(sessionStorage.getItem(\"response\") as string);\r\n  const auth = JSON.parse(sessionStorage.getItem(\"auth\") as string);\r\n  // ! useCase of useLocalStorage Hook\r\n  // const [{ identityNumber }] = useLocalStorage(\"Details\");\r\n  const [croppedImage, setCroppedImage] = useState<string>(\"\");\r\n  const [cropped, setCropped] = useState<boolean>(false);\r\n  const webcamRef = useRef<any>(null);\r\n  const [image, setImage] = useState<string | any>(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const imgRef = useRef<any>(null);\r\n\r\n  const [deviceId, setDeviceId] = React.useState({});\r\n  const [devices, setDevices] = React.useState([]);\r\n\r\n  const handleDevices = React.useCallback(\r\n    mediaDevices =>\r\n      setDevices(mediaDevices.filter(({ kind }) => kind === \"videoinput\")),\r\n    [setDevices],\r\n  );\r\n\r\n  //   ! Functionality\r\n\r\n  const handleCropChange = useCallback(() => {\r\n    const croppedImgData = imgRef.current.cropper\r\n      .getCroppedCanvas()\r\n      .toDataURL(\"image/jpeg\", 1);\r\n    setCroppedImage(croppedImgData);\r\n    // console.log(imgRef)\r\n  }, []);\r\n\r\n  const cropImage = () => {\r\n    setImage(croppedImage);\r\n    setCropped(true);\r\n  };\r\n\r\n  const capture = useCallback(() => {\r\n    setImage(webcamRef!.current!.getScreenshot());\r\n  }, [webcamRef]);\r\n\r\n  const [imgs, setImgs] = useState(\"\");\r\n\r\n  const handleNext = () => {\r\n    //  navigate(PATHS.dashboard)\r\n    const url = \"http://gn-testapi.tech5.tech:9090/MBAP/api/verifyBiometrics\";\r\n    const allOriginsUrl = \"https://api.allorigins.win/get?url=\";\r\n\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON?.stringify({\r\n        transactionId: \"b3c350aa-2734-48d1-345-7777777\",\r\n        transactionSource: \"nxGen MBAP TestTool\",\r\n        uid: \"111122223333555555\",\r\n        needTemplates: 0,\r\n        probeFace: {\r\n          pos: \"F\",\r\n          image: croppedImage.replace(\"data:image/jpeg;base64,\", \"\"),\r\n          template: null,\r\n          quality: 0.0,\r\n        },\r\n        galleryFace: {\r\n          pos: \"F\",\r\n          image: response.userData[0]?.ocr_user_image,\r\n          template: null,\r\n          quality: 0.0,\r\n        },\r\n        probeFingerData: null,\r\n        galleryFingerData: null,\r\n        probeIrisData: null,\r\n        galleryIrisData: null,\r\n        faceThreshold: \"6\",\r\n        fingerThreshold: \"6\",\r\n        irisThreshold: \"6\",\r\n      }),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Handle the API response here\r\n      })\r\n      .catch(error => {\r\n        // Handle any errors here\r\n      });\r\n    setIsLoading(true);\r\n    fetch(\"http://gn-testapi.tech5.tech:9090/MBAP/api/verifyBiometrics\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON?.stringify({\r\n        transactionId: \"b3c350aa-2734-48d1-345-7777777\",\r\n        transactionSource: \"nxGen MBAP TestTool\",\r\n        uid: \"111122223333555555\",\r\n        needTemplates: 0,\r\n        probeFace: {\r\n          pos: \"F\",\r\n          image: croppedImage.replace(\"data:image/jpeg;base64,\", \"\"),\r\n          template: null,\r\n          quality: 0.0,\r\n        },\r\n        galleryFace: {\r\n          pos: \"F\",\r\n          image: response.userData[0]?.ocr_user_image,\r\n          template: null,\r\n          quality: 0.0,\r\n        },\r\n        probeFingerData: null,\r\n        galleryFingerData: null,\r\n        probeIrisData: null,\r\n        galleryIrisData: null,\r\n        faceThreshold: \"6\",\r\n        fingerThreshold: \"6\",\r\n        irisThreshold: \"6\",\r\n      }),\r\n    })\r\n      .then(function (response) {\r\n        return response?.json();\r\n      })\r\n      .then(function (data) {\r\n        setIsLoading(false);\r\n        const response = JSON.stringify(data);\r\n        sessionStorage.setItem(\"auth\", response);\r\n\r\n        if (data.verificationResult === true) {\r\n          navigate(PATHS.dashboard);\r\n        } else if (data.verificationResult === false) {\r\n          if (data?.error?.errorMessage === \"Verification Failed\") {\r\n            toast.error(\"Authentication failed, face mismatch\");\r\n          } else {\r\n            toast.error(\"No proper face is captured\");\r\n          }\r\n          setCroppedImage(\"\");\r\n          setImage(\"\");\r\n          setCropped(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (response?.statusCode != 200 || !response?.statusCode) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [response?.statusCode]);\r\n  useEffect(() => {\r\n    if (auth?.verificationResult === true) {\r\n      navigate(PATHS?.dashboard);\r\n    }\r\n  }, [auth?.verificationResult]);\r\n\r\n  const retake = () => {\r\n    setCroppedImage(\"\");\r\n    setImage(\"\");\r\n    setCropped(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.enumerateDevices().then(handleDevices);\r\n  }, [handleDevices]);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className='d-flex justify-content-center align-items-center'\r\n        id='contentContainer'\r\n      >\r\n        <div id='containerRight'>\r\n          {isLoading ? (\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              <CircularProgress color='info' />\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              <Box\r\n                display={\"flex\"}\r\n                flexDirection={\"row\"}\r\n                alignContent={\"center\"}\r\n                justifyContent={\"center\"}\r\n                height={\"20.9rem\"}\r\n                width={\"100%\"}\r\n                marginTop={\"2rem\"}\r\n              >\r\n                {!image?.length ? (\r\n                  <Webcam\r\n                    audio={false}\r\n                    height={300}\r\n                    ref={webcamRef}\r\n                    screenshotFormat='image/jpeg'\r\n                    width={500}\r\n                    style={{\r\n                      borderRadius: 5,\r\n                    }}\r\n                    //videoConstraints={videoConstraints}\r\n                    videoConstraints={{\r\n                      width: 519,\r\n                      height: 400,\r\n                      //facingMode,\r\n                      deviceId,\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <Box marginTop={\".5rem\"}>\r\n                    {cropped && croppedImage?.length ? (\r\n                      <img\r\n                        alt='sda'\r\n                        style={{\r\n                          width: imgRef?.current?.cropper?.cropBoxData?.width,\r\n                          height: imgRef?.current?.cropper?.cropBoxData?.height,\r\n                        }}\r\n                        src={croppedImage}\r\n                      />\r\n                    ) : (\r\n                      <Cropper\r\n                        cropend={() => handleCropChange()}\r\n                        ref={imgRef}\r\n                        src={image as string}\r\n                        zoomable={false}\r\n                        autoCropArea={-0.01}\r\n                        background={false}\r\n                      />\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n\r\n              <Box\r\n                display={\"flex\"}\r\n                flexDirection={\"column\"}\r\n                alignContent={\"center\"}\r\n                justifyContent={\"center\"}\r\n              >\r\n                {!image?.length ? (\r\n                  <Box display={\"flex\"} gap={\"2rem\"}>\r\n                    <Button\r\n                      style={{\r\n                        background: \"#bd6100\",\r\n\r\n                        width: \"13rem\",\r\n                      }}\r\n                      onClick={() => {\r\n                        navigate(\"/\");\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      style={{\r\n                        background: \"#bd6100\",\r\n\r\n                        width: \"13rem\",\r\n                      }}\r\n                      onClick={() => {\r\n                        capture();\r\n                      }}\r\n                    >\r\n                      Capture\r\n                    </Button>\r\n                  </Box>\r\n                ) : (\r\n                  <Box\r\n                    style={{\r\n                      display: \"flex\",\r\n                      width: \"100%\",\r\n                      flexDirection: \"row\",\r\n                      marginTop: \"2rem\",\r\n                      justifyContent: \"space-between\",\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      style={{\r\n                        background: \"#bd6100\",\r\n\r\n                        width: \"13rem\",\r\n                      }}\r\n                      onClick={() => {\r\n                        retake();\r\n                      }}\r\n                    >\r\n                      Re-take\r\n                    </Button>\r\n\r\n                    {/* //! cropper  === true ? \"Continue-btn\" : \"Crop-btn\"   */}\r\n\r\n                    {cropped ? (\r\n                      <Button\r\n                        style={{\r\n                          background: \"#bd6100\",\r\n\r\n                          width: \"13rem\",\r\n                        }}\r\n                        onClick={() => {\r\n                          handleNext();\r\n                        }}\r\n                      >\r\n                        Continue\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        style={{\r\n                          background: \"#bd6100\",\r\n\r\n                          width: \"13rem\",\r\n                        }}\r\n                        onClick={() => {\r\n                          cropImage();\r\n                        }}\r\n                      >\r\n                        Crop\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Face;\r\n"],"names":["_imgRef$current","_imgRef$current$cropp","_imgRef$current$cropp2","_imgRef$current2","_imgRef$current2$crop","_imgRef$current2$crop2","navigate","useNavigate","response","JSON","parse","sessionStorage","getItem","auth","_useState","useState","_useState2","_slicedToArray","croppedImage","setCroppedImage","_useState3","_useState4","cropped","setCropped","webcamRef","useRef","_useState5","_useState6","image","setImage","_useState7","_useState8","isLoading","setIsLoading","imgRef","_React$useState","React","_React$useState2","deviceId","_React$useState3","_React$useState4","setDevices","handleDevices","mediaDevices","filter","_ref","kind","handleCropChange","useCallback","croppedImgData","current","cropper","getCroppedCanvas","toDataURL","capture","getScreenshot","_useState9","_useState10","useEffect","statusCode","verificationResult","PATHS","navigator","enumerateDevices","then","_jsx","children","className","id","Box","sx","display","justifyContent","alignItems","height","CircularProgress","color","_jsxs","_Fragment","flexDirection","alignContent","width","marginTop","length","alt","style","cropBoxData","src","Cropper","cropend","ref","zoomable","autoCropArea","background","Webcam","audio","screenshotFormat","borderRadius","videoConstraints","Button","onClick","_response$userData$","_response$userData$2","fetch","method","headers","body","stringify","transactionId","transactionSource","uid","needTemplates","probeFace","pos","replace","template","quality","galleryFace","userData","ocr_user_image","probeFingerData","galleryFingerData","probeIrisData","galleryIrisData","faceThreshold","fingerThreshold","irisThreshold","json","data","catch","error","setItem","_data$error","errorMessage","toast","handleNext","gap"],"sourceRoot":""}